Добрый день.

В проекте упрощенно имитируется банковская система, есть два вида клиентов, имеющих статус standard или premium. Если статус standard, то ставка 5%, если статус premium, то 7,5%. 

У каждого клиента имеется изначально 2 счета, капитализируемый и некапитализируемый. 

При создании списка клиентов и их счетов на каждый счет автоматически начисляется определенная сумма - Money, также в информации о счете клиента указана величина итоговой суммы по окончании срока действия счета - FinalMoney. Величина FinalMoney рассчитывается в этом проекте следующим образом: Money * ставка (зависит от статуса клиента) * множитель (если капитализируемый то 2, если нет, то 1).    

Задание 1: в файле BankCheck имеется обобщенный класс с параметризованными параметрами public class BankAccount<T, K>, через который реализовано создание счета определенного типа и с определенной ставкой в зависимости от того, какой клиент. 

Закрытие счета реализовано через изменение id добавлением ему пометки _Closed в конце. При наличии данной пометки любые операции с этим счетом не осуществимы, при этом сам счет остается в списке видимым.

Внутренние переводы между счетами одного клиента реализованы в разделе "Внутренние транзакции". 

Счет также является либо депозитным либо недепозитным. В данной системе от этого зависит лишь наличие комиссии по пополнениям и переводам. 

Задание 2: в файле BankCheck имеются классы public class NoDeposit, public class Deposit: NoDeposit, public class AddMoneyDeposit: IAccountAddMoney<Deposit>, public class AddMoneyNoDeposit: IAccountAddMoney<NoDeposit>, через которые реализована ковариатность. IAccountAddMoney - ковариантный интерфейс, который может учитывать классы Deposit и NoDeposit. Если счет депозитный, то с помощью этих сущностей пользователь уведомляется о том, что при пополнении со счета будет взиматься комиссия. Если счет недепозитный, комиссии не будет. В алгоритме пополнения счета это все учтено таким образом, что объявляя объект более универсального типа NoDeposit можно использовать тип более конкретный, тем самым реализуется ковариантность в проекте (см. файл AddMoneyAccount).  

Задание 3: в файле BankCheck имеются класс public class Transaction : ITransaction<NoDeposit>, через который реализована контравариатность. ITransaction  - контравариантный интерфейс, который может учитывать классы Deposit и NoDeposit. Если какой-то один из счетов депозитный, то с помощью этих сущностей пользователь уведомляется о том, что при переводе денежных средств со счета-отправителя будет взиматься комиссия. Если счет недепозитный, комиссии не будет. В алгоритме перевода это все учтено таким образом, что объявляя объект более конкретного типа Deposit можно использовать тип более универсальный, тем самым реализуется контравариантность в проекте (см. файл ExternalFinanceTransaction).